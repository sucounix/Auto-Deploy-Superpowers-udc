version: 2.1
orbs:
  slack: circleci/slack@4.4.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
       workflow-id:
         type: string
         default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws s3 rm s3://udapeople-be-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-be-${CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation delete-stack --stack-name "udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
       workflow-id:
         type: string
         default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 85644424-1a95-4a36-8c11-88cab4ccea64" --request GET https://api.memstash.io/values/Udapeople-DB)        
            if(( $SUCCESS==1 )); 
            then
               cd ~/project/backend
               npm install
               npm run migrations:revert
            fi
          
jobs:
     
  build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              cd frontend
              npm i --save
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build
        - slack/notify:
            channel: super-power
            event: fail
            template: basic_fail_1             

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i --save
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm i
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum -y install tar gzip 
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-be-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="udapeople-be-${CIRCLE_WORKFLOW_ID:0:7}"  
#              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --tags project="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
               --stack-name "udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="fe-${CIRCLE_WORKFLOW_ID:0:7}"  
#              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"" \
                  --output text >> .circleci/ansible/inventory.txt
                  cat  .circleci/ansible/inventory.txt
#            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:      
      - checkout
      - add_ssh_keys:
          fingerprints: ["12:ae:74:a7:ec:34:5f:fe:ae:e2:c6:87:d4:64:8d:1b"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
#            - project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            cd ~/project/.circleci/ansible/ 
            ansible-playbook -i inventory.txt configure-server.yml -vvv
#             exit 1
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            echo ${CIRCLE_WORKFLOW_ID}
            cd backend
            touch .env
            echo ENVIRONMENT=production > ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"           
            cd ~/project/backend
            npm install
            npm run migrations >> dbmigr.txt
      - run:
          name: Send migration results to memstash
          command: |
            cat /home/circleci/project/backend/dbmigr.txt
            if  cat home/circleci/project/backend/dbmigr.txt | grep -i "has been executed successfully"  ; then  curl -H "Content-Type: text/plain" -H "token: 85644424-1a95-4a36-8c11-88cab4ccea64" --request PUT --data "1" https://api.memstash.io/values/Udapeople-DB ; fi

      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
     - image: sleavely/node-awscli
    steps:
      - checkout
      - run: npm install
      - run:
          name: Get backend url
          command: |
            echo ${CIRCLE_WORKFLOW_ID}
            BACKEND_IP=$(aws ec2 describe-instances \
            \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"" \
                  --output text)

                  echo "${BACKEND_IP}"

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd ~/project/frontend/
            npm i --save
            npm run build --save
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ~/project/frontend/dist  s3://udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - checkout
      # - restore_cache:
      #     keys: [backend-build]

      - add_ssh_keys:
          fingerprints: ["12:ae:74:a7:ec:34:5f:fe:ae:e2:c6:87:d4:64:8d:1b"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
          #  - project/backend/dist
          # - project/backend/.circleci/ansible
      - run:
           name: Install dependencies
           command: |
            apk add tar gzip npm openssh-client nodejs curl
            apk add --update ansible
            pip install awscli

      - run:
          name: compile BE
          command: |
            echo ${CIRCLE_WORKFLOW_ID}
            cd backend
            touch .env
            echo ENVIRONMENT=production > ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"       
            cat .env
            cd ..
            tar -czvf ~/project/app.tar.gz backend/.
      - run:
           name: Deploy backend
           command: |
            ls ~/project/backend
            cd ~/project/.circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
  smoke-test:
      docker:
      - image: python:3.7-alpine3.11
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              apk add --update curl
              pip install awscli
        - run:
            name: Get Backend URL and performe smoke test.
            command: |
              BACKEND_IP=$(aws ec2 describe-instances \
              \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"" \
                    --output text)        
                    echo ${BACKEND_IP}
              curl "http://${BACKEND_IP}:3030/api/status"
        - run:
            name: Frontend smoke test.
            command: |
              URL="http://udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
              echo ${URL}
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
        - revert-migrations
        - destroy-environment


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # aws cloudformation \
            # list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            # --region us-west-2 --no-paginate --output text >> ./.circleci/oldworkflowid.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name UdaPeople-CDN \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/oldworkflowid.txt
      - destroy-environment

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
       - checkout
       - run:
           name: Install dependencies
           command: |
             yum -y install tar gzip
       - run:
           name: Get old stack workflow id
           command: |
              export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)

              echo "${OldWorkflowID}"

              export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

              echo "${STACKS}"

              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]; then
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi

      #  - run:
      #      name: Remove old stacks and files
      #      command: |
      #       if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
      #       then
      #         aws s3 rm "s3://udapeople-fe-${OldWorkflowID}" --recursive
      #         aws cloudformation delete-stack \
      #           --stack-name "udapeople-fe-${OldWorkflowID}"
      #         aws cloudformation delete-stack \
      #           --stack-name "udapeople-be-${OldWorkflowID}"
      #       fi
      - slack/notify:
          channel: super-power
          event: pass
          template: success_tagged_deploy_1
      
                  
workflows:
  # send-notification:
  #   jobs:
  #     - notify:
  #         context: slack-secrets
  default:
    jobs:
      #  - build-frontend:
      #       context: slack-secrets
      #  - build-backend
      #  - test-frontend:
      #      requires: [build-frontend]
      #  - test-backend:
      #      requires: [build-backend]
      #  - scan-backend:
      #      requires: [build-backend]
      #  - scan-frontend:
      #      requires: [build-frontend]
      #  - deploy-infrastructure:
      #      requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #      filters:
      #         branches:
      #           only: [master]
      #  - configure-infrastructure:
      #      requires: [deploy-infrastructure]
      #  - run-migrations:
      #      requires: [configure-infrastructure]
      #  - deploy-frontend:
      #      requires: [run-migrations]
      #  - deploy-backend:
      #      requires: [run-migrations]
      #  - smoke-test:
      #      requires: [deploy-backend, deploy-frontend]
      #  - cloudfront-update:
      #      requires: [smoke-test]
       - cleanup:
      #     requires: [cloudfront-update]
           context: slack-secrets
