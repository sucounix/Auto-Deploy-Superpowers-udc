version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i --save
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i --save
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm i
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum -y install tar gzip 
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-be-0987654321" \
              --parameter-overrides ID="udapeople-be-0987654321"  
#              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-fe-0987654321" \
               --parameter-overrides ID="udapeople-fe-0987654321"  
#              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text >> .circleci/ansible/inventory.txt
                  cat  .circleci/ansible/inventory.txt
#            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:      
      - checkout
      - add_ssh_keys:
          fingerprints: ["12:ae:74:a7:ec:34:5f:fe:ae:e2:c6:87:d4:64:8d:1b"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
#            - project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            cd ~/project/.circleci/ansible/ 
            ansible-playbook -i inventory.txt configure-server.yml -vvv
#             exit 1
#       # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
             cd ~/project/backend
             npm install db-migrate --save
             npm run migrations >> dbmigr.txt
      - run:
          name: Send migration results to memstash
          command: |
            cat /home/circleci/project/backend/dbmigr.txt
            if  cat home/circleci/project/backend/dbmigr.txt | grep -i "has been executed successfully"  ; then  curl -H "Content-Type: text/plain" -H "token: 85644424-1a95-4a36-8c11-88cab4ccea64" --request PUT --data "1" https://api.memstash.io/values/Udapeople-DB ; fi
#      # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
     - image: sleavely/node-awscli
    steps:
      - checkout
      - run: npm install
      - run:
          name: Get backend url
          command: |
            echo ${CIRCLE_WORKFLOW_ID}
            BACKEND_IP=$(aws ec2 describe-instances \
            \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)

                  echo "${BACKEND_IP}"

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd ~/project/frontend/
            npm i --save
            npm run build --save
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ~/project/frontend/dist  s3://udapeople-udapeople-fe-0987654321 --recursive
#       # Here's where you will add some code to rollback on failure      
  deploy-backend:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - add_ssh_keys:
          fingerprints: ["12:ae:74:a7:ec:34:5f:fe:ae:e2:c6:87:d4:64:8d:1b"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
          #  - project/backend/dist
          # - project/backend/.circleci/ansible
      - run:
           name: Install dependencies
           command: |
            apk add tar gzip npm openssh-client nodejs curl
            apk add --update ansible
            pip install awscli

      - run:
          name: compile BE
          command: |
            echo ${CIRCLE_WORKFLOW_ID}
            cd ~/project/
            #npm i --save
            #npm run build --save
            ls dist
            echo ENVIRONMENT=production >> "backend/dist .env"
            echo TYPEORM_CONNECTION=postgres >> "backend/dist .env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/dist .env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/dist .env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/dist .env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/dist .env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/dist .env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/dist .env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/dist .env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/dist .env"
 
            tar -czvf app.tar.gz ~/project/backend/dist/*
      - run:
           name: Deploy backend
           command: |
            ls ~/project/backend
            cd ~/project/.circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
smoke-test:
    - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get Backend URL and performe smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)        
                  echo ${BACKEND_IP}
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-udapeople-fe-0987654321.s3-website-us-west-2.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]